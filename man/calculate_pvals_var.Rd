% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_pvals_var.R
\name{calculate_pvals_var}
\alias{calculate_pvals_var}
\title{Calculate estimates of p-values for changepoint methods, using Gaussian processes and/or importance sampling.}
\usage{
calculate_pvals_var(
  results,
  h,
  N_sample = 100,
  frac = 1,
  sampling_distribution = "uniform",
  scaling_parameter = 1,
  NW = 1,
  cp_bound = TRUE,
  gamma = 1,
  num_pvals = NA
)
}
\arguments{
\item{results}{Output of \code{find_changepoints}.}

\item{h}{Window size: the null hypothesis is that there are no changepoints within a window \code{h} of the changepoint of interest. This can be a positive integer (>=2)
or a vector of length 2 (if the window is asymmetric) or \code{NULL} (if the window is defined by the changepoints either side of the changepoint of interest).}

\item{N_sample}{Number of samples to use in estimating the p-value; defaults to 100.}

\item{frac}{Proportion of samples to be used to fit the Gaussian process; the remainder will be used for importance sampling from the Gaussian process posterior.
If \code{frac = 1} (which is the default), only a Gaussian process will be used. If \code{frac = 0}, only importance #' sampling will be used;
the sampling will be from either a Beta or Uniform distribution (according to the parameter \code{sampling_distribution}).}

\item{sampling_distribution}{Distribution from which to sample values of \eqn{\phi} to fit the Gaussian process; or, if \code{frac = 0}, the distribution from which to
sample \eqn{\phi} for importance sampling. Options are \code{"uniform"} (default) or \code{"beta"}.}

\item{scaling_parameter}{Scaling parameter for the sampling distribution, if \code{sampling_distribution = "beta"}. The sampling is
done from \eqn{Beta(h/2k, h/2k)}. Defaults to 1. Ignored if \code{sampling_distribution = "uniform"}.}

\item{NW}{Number of random \code{W} values to generate; defaults to 1.}

\item{cp_bound}{If \code{TRUE}, then if there is an estimated changepoint within the window that is fixed under the null hypothesis,
this changepoint will be used as the boundary of the window.}

\item{gamma}{Value in \code{(0, 1]}. If \code{h = NULL}, then \eqn{h} is taken to be \code{gamma} times the distance between the changepoint
of interest and the estimated changepoints on either side. Ignored if \code{h} specified; defaults to \code{1}.}

\item{num_pvals}{Number of p-values to calculate; by default p-values will be calculated for all detected changepoints.}
}
\value{
A list.
\itemize{
\item \code{changepoints} A vector of detected changepoints.
\item \code{p} A vector of estimated p-values.
\item \code{P_phi_in_S} A matrix containing estimates of \eqn{Pr(\phi \in S)} for each changepoint and each sampled \eqn{W}.
\item \code{p_W} A matrix containing values of the p-value for each changepoint and each sampled \eqn{W}.
}
}
\description{
Calculate estimates of p-values for changepoint methods, using Gaussian processes and/or importance sampling.
}
\details{
This function estimates p-values for the change in variance model, when changepoint locations are estimated using methods based on the likelihood ratio:
in this case p-values cannot be calculated analytically. If changepoints are estimated using the CUSUM statistic, then the function \code{calculate_pvals_all}
should be used to calculate exact p-values (although this function can still be used to obtain estimates).
The function \code{find_changepoints} should first be run on the data to estimate changepoint locations, and the output of that function fed to \code{calculate_pvals_var}.

Given a changepoint of interest \eqn{\tau_j}, there are several options for the null hypothesis:
\itemize{
\item There are no changepoints within a window size \eqn{h} of \eqn{\tau_j}. In this case \code{h} should be supplied. It is possible
to use different values of \code{h} on either side of \eqn{\tau_j}, in which case \code{h} should be a vector of length 2. If \eqn{\tau_j - h < 1},
then the value of \code{h} to the left of \eqn{\tau_j} will be set to \eqn{\tau_j}; similarly, if \eqn{\tau_h + h > n}, then the value of \code{h}
to the right of \eqn{\tau_j} will be set to \eqn{n - \tau_j}.
If \code{cp_bound = TRUE}, then if there is another estimated changepoint within \code{h} of \eqn{\tau_j} then the window size used
will be the minimum of \code{h} and the distance between \eqn{\tau_j} and the closest estimated changepoint to \eqn{\tau_j}.
\item There are no other changepoints between \eqn{\tau_{j-1}} and \eqn{\tau_{j+1}}. In this case \code{h} should be set to \code{NULL}
and \code{gamma} should be 1. (This is the default for the function.)
\item There are no other changepoints between the midpoint of \eqn{\tau_{j-1}} and \eqn{\tau_j} and the midpoint of \eqn{\tau_j} and
\eqn{\tau_{j+1}}. In this case use \code{h = NULL} and \code{gamma = 0.5}.
}
}
\examples{
set.seed(12)
x <- c(rnorm(100), rnorm(100, sd=2), rnorm(100))
results_wbs <- find_changepoints(x, method="wbs", model="var", 
                                 params=list(num_rand_samples=200, threshold=7))
pvals <- calculate_pvals_var(results_wbs, h=50, N_sample=200, frac=0.8)
plot(x)
abline(v=pvals$changepoints, col=ifelse(pvals$p < 0.05, 2, 1))

results_pelt <- find_changepoints(x, method="pelt", model="var", 
                                  params=list(penalty="Manual", pen.value=7))
pvals <- calculate_pvals_var(results_pelt, h=50, N_sample=200, frac=0.8)
plot(x)
abline(v=pvals$changepoints, col=ifelse(pvals$p < 0.05, 2, 1))

}
